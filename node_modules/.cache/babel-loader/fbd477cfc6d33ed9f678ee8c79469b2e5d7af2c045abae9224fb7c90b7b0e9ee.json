{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tatianawiener/Documents/GitHub/ycc/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/tatianawiener/Documents/GitHub/ycc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import contract from'../contract/ABI.json';import{ethers}from'ethers';import{isMetaMaskInstalled,ethereum}from'../utils/web3functions';export var mint=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(mint_amount){var provider,signer,contractAddress,nftContract,txnHash;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:if(!isMetaMaskInstalled()){_context.next=9;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();contractAddress=\"0x9582Cb891566e6147E4e949482d71673dB5EE9da\";nftContract=new ethers.Contract(contractAddress,contract,signer);_context.next=7;return nftContract.mint(mint_amount,{gasLimit:\"285000\",value:ethers.utils.parseEther((0.001*mint_amount).toString())});case 7:txnHash=_context.sent;return _context.abrupt(\"return\",txnHash);case 9:case\"end\":return _context.stop();}},_callee);}));return function mint(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"names":["contract","ethers","isMetaMaskInstalled","ethereum","mint","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","mint_amount","provider","signer","contractAddress","nftContract","txnHash","wrap","_callee$","_context","prev","next","providers","Web3Provider","getSigner","Contract","gasLimit","value","utils","parseEther","toString","sent","abrupt","stop","_x","apply","arguments"],"sources":["/Users/tatianawiener/Documents/GitHub/ycc/src/utils/web3mint.js"],"sourcesContent":["import contract from '../contract/ABI.json';\nimport { ethers } from 'ethers';\nimport { isMetaMaskInstalled, ethereum } from '../utils/web3functions';\n\n\n\nexport const mint = async (mint_amount) => {\n    if(isMetaMaskInstalled()){\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contractAddress = \"0x9582Cb891566e6147E4e949482d71673dB5EE9da\";\n        const nftContract = new ethers.Contract(contractAddress, contract, signer);\n\n        let txnHash = await nftContract.mint(mint_amount, {\n            gasLimit: \"285000\",\n            value: ethers.utils.parseEther((0.001 * mint_amount).toString())\n        })\n        return txnHash\n    }\n}"],"mappings":"8QAAA,MAAO,CAAAA,QAAQ,KAAM,sBAAsB,CAC3C,OAASC,MAAM,KAAQ,QAAQ,CAC/B,OAASC,mBAAmB,CAAEC,QAAQ,KAAQ,wBAAwB,CAItE,MAAO,IAAM,CAAAC,IAAI,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,WAAW,MAAAC,QAAA,CAAAC,MAAA,CAAAC,eAAA,CAAAC,WAAA,CAAAC,OAAA,QAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,aAC/BlB,mBAAmB,CAAC,CAAC,EAAAgB,QAAA,CAAAE,IAAA,UACdT,QAAQ,CAAG,GAAI,CAAAV,MAAM,CAACoB,SAAS,CAACC,YAAY,CAACnB,QAAQ,CAAC,CACtDS,MAAM,CAAGD,QAAQ,CAACY,SAAS,CAAC,CAAC,CAC7BV,eAAe,CAAG,4CAA4C,CAC9DC,WAAW,CAAG,GAAI,CAAAb,MAAM,CAACuB,QAAQ,CAACX,eAAe,CAAEb,QAAQ,CAAEY,MAAM,CAAC,CAAAM,QAAA,CAAAE,IAAA,SAEtD,CAAAN,WAAW,CAACV,IAAI,CAACM,WAAW,CAAE,CAC9Ce,QAAQ,CAAE,QAAQ,CAClBC,KAAK,CAAEzB,MAAM,CAAC0B,KAAK,CAACC,UAAU,CAAC,CAAC,KAAK,CAAGlB,WAAW,EAAEmB,QAAQ,CAAC,CAAC,CACnE,CAAC,CAAC,QAHEd,OAAO,CAAAG,QAAA,CAAAY,IAAA,QAAAZ,QAAA,CAAAa,MAAA,UAIJhB,OAAO,0BAAAG,QAAA,CAAAc,IAAA,MAAAvB,OAAA,GAErB,kBAbY,CAAAL,IAAIA,CAAA6B,EAAA,SAAA5B,IAAA,CAAA6B,KAAA,MAAAC,SAAA,OAahB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}