{"ast":null,"code":"export const ethereum = window.ethereum;\n\n// check if metamask extension is installed on the browser\nexport const isMetaMaskInstalled = () => {\n  if (ethereum) {\n    return true;\n  }\n  return false;\n};\n\n// connect to metakmask wallet\nexport const connectWallet = async () => {\n  const accounts = await ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  return accounts;\n};\n\n// connect to metakmask wallet\nexport const connectAccount = async () => {\n  const accounts = await ethereum.request({\n    method: 'eth_accounts'\n  });\n  return accounts;\n};\n\n// disconnect metamask wallet\nexport const disconnectWallet = () => {\n  localStorage.removeItem('isWalletConnected');\n  window.location.reload();\n};\n\n// check metamask on disconnect\nexport const onMetamaskDisconnect = () => {\n  ethereum.on('disconnect', () => {\n    console.log('Disconnected');\n  });\n};\n\n// check metamask on connected\nexport const onMetamaskconnect = async () => {\n  const chainId = await getChainId();\n  ethereum.on('connect', () => {\n    console.log(chainId);\n  });\n};\n\n// on chain change\nexport const onChainChange = () => {\n  ethereum.on('chainChanged', _chainId => {\n    return parseInt(_chainId);\n  });\n};\nexport const getChainId = async () => {\n  const chainId = await ethereum.request({\n    method: 'eth_chainId'\n  });\n  return parseInt(chainId);\n};\nexport const isWalletConnected = () => {\n  if (localStorage.getItem('isWalletConnected') === 'true') {\n    return true;\n  }\n  return false;\n};","map":{"version":3,"names":["ethereum","window","isMetaMaskInstalled","connectWallet","accounts","request","method","connectAccount","disconnectWallet","localStorage","removeItem","location","reload","onMetamaskDisconnect","on","console","log","onMetamaskconnect","chainId","getChainId","onChainChange","_chainId","parseInt","isWalletConnected","getItem"],"sources":["C:/Users/16176/Documents/GitHub/Tatiana-W.github.io/src/utils/web3functions.js"],"sourcesContent":["export const ethereum = window.ethereum;\r\n\r\n\r\n// check if metamask extension is installed on the browser\r\nexport const isMetaMaskInstalled = () =>{\r\n    if(ethereum){\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n\r\n// connect to metakmask wallet\r\nexport const connectWallet = async () =>{\r\n    const accounts = await ethereum.request({method: 'eth_requestAccounts'});\r\n    \r\n    return accounts;\r\n}\r\n\r\n// connect to metakmask wallet\r\nexport const connectAccount = async () =>{\r\n    const accounts = await ethereum.request({method: 'eth_accounts'});\r\n    \r\n    return accounts;\r\n}\r\n\r\n\r\n// disconnect metamask wallet\r\nexport const disconnectWallet = () =>{\r\n    localStorage.removeItem('isWalletConnected');\r\n    window.location.reload();\r\n}\r\n\r\n// check metamask on disconnect\r\nexport const onMetamaskDisconnect = () =>{\r\n    ethereum.on('disconnect', () =>{\r\n        console.log('Disconnected');\r\n    });\r\n}\r\n\r\n\r\n// check metamask on connected\r\nexport const onMetamaskconnect = async () =>{\r\n    const chainId = await getChainId();\r\n    ethereum.on('connect', () =>{\r\n        console.log(chainId);\r\n    });\r\n}\r\n\r\n// on chain change\r\nexport const onChainChange = () =>{\r\n    ethereum.on('chainChanged', (_chainId) =>{\r\n        return parseInt(_chainId);\r\n    });\r\n}\r\n\r\nexport const getChainId = async () =>{\r\n    const chainId = await ethereum.request({ method: 'eth_chainId' });\r\n\r\n    return parseInt(chainId);\r\n}\r\n\r\n\r\nexport const isWalletConnected = () => {\r\n    if(localStorage.getItem('isWalletConnected') === 'true'){\r\n        return true\r\n    }\r\n\r\n    return false;\r\n}"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAGC,MAAM,CAACD,QAAQ;;AAGvC;AACA,OAAO,MAAME,mBAAmB,GAAGA,CAAA,KAAK;EACpC,IAAGF,QAAQ,EAAC;IACR,OAAO,IAAI;EACf;EAEA,OAAO,KAAK;AAChB,CAAC;;AAGD;AACA,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAW;EACpC,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAO,CAAC;IAACC,MAAM,EAAE;EAAqB,CAAC,CAAC;EAExE,OAAOF,QAAQ;AACnB,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAAW;EACrC,MAAMH,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAO,CAAC;IAACC,MAAM,EAAE;EAAc,CAAC,CAAC;EAEjE,OAAOF,QAAQ;AACnB,CAAC;;AAGD;AACA,OAAO,MAAMI,gBAAgB,GAAGA,CAAA,KAAK;EACjCC,YAAY,CAACC,UAAU,CAAC,mBAAmB,CAAC;EAC5CT,MAAM,CAACU,QAAQ,CAACC,MAAM,CAAC,CAAC;AAC5B,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAK;EACrCb,QAAQ,CAACc,EAAE,CAAC,YAAY,EAAE,MAAK;IAC3BC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC/B,CAAC,CAAC;AACN,CAAC;;AAGD;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAW;EACxC,MAAMC,OAAO,GAAG,MAAMC,UAAU,CAAC,CAAC;EAClCnB,QAAQ,CAACc,EAAE,CAAC,SAAS,EAAE,MAAK;IACxBC,OAAO,CAACC,GAAG,CAACE,OAAO,CAAC;EACxB,CAAC,CAAC;AACN,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAGA,CAAA,KAAK;EAC9BpB,QAAQ,CAACc,EAAE,CAAC,cAAc,EAAGO,QAAQ,IAAI;IACrC,OAAOC,QAAQ,CAACD,QAAQ,CAAC;EAC7B,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMF,UAAU,GAAG,MAAAA,CAAA,KAAW;EACjC,MAAMD,OAAO,GAAG,MAAMlB,QAAQ,CAACK,OAAO,CAAC;IAAEC,MAAM,EAAE;EAAc,CAAC,CAAC;EAEjE,OAAOgB,QAAQ,CAACJ,OAAO,CAAC;AAC5B,CAAC;AAGD,OAAO,MAAMK,iBAAiB,GAAGA,CAAA,KAAM;EACnC,IAAGd,YAAY,CAACe,OAAO,CAAC,mBAAmB,CAAC,KAAK,MAAM,EAAC;IACpD,OAAO,IAAI;EACf;EAEA,OAAO,KAAK;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}